<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A-ha - Michael&#39;s Personal Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on A-ha - Michael&#39;s Personal Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 07 Jun 2020 12:57:49 -0400</lastBuildDate>
    
	<atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode Weekly Contest 192</title>
      <link>http://localhost:1313/post/leetcode-weekly-contest-192/</link>
      <pubDate>Sun, 07 Jun 2020 12:57:49 -0400</pubDate>
      
      <guid>http://localhost:1313/post/leetcode-weekly-contest-192/</guid>
      <description>Did well on the first two problems; spent multiple iterations on the third problem; got stuck for the last one.
Problem Three: Design Browser History This is a problem simulating browse history behavior. I spent too many iterations on debugging the offset computation. To improve, focus on the distinction between length and index.
Problem Four: Paint House III I found out the state definition early enough(about 5 minutes in). However got stuck for a long time on how to handle the house is already patined case.</description>
    </item>
    
    <item>
      <title>Leetcode Contest 190</title>
      <link>http://localhost:1313/post/leetcode-contest-190/</link>
      <pubDate>Sun, 24 May 2020 18:39:37 -0400</pubDate>
      
      <guid>http://localhost:1313/post/leetcode-contest-190/</guid>
      <description>What went well: I solved first three problems relatively quickly and have working intuition on the last problem.
What did not go well:
  problem 2 is a two pointer problem, I spent time implmenting the O(N^2) approach. This can be improlved by reason through the input size and do not settle for a inefficient solution.
  problem 3 is a problem on trees. The algorithm I settled on computing all possible paths shows duplication paths.</description>
    </item>
    
    <item>
      <title>Leetcode Contest 189</title>
      <link>http://localhost:1313/post/leetcode-contest-189/</link>
      <pubDate>Sun, 17 May 2020 20:02:20 -0400</pubDate>
      
      <guid>http://localhost:1313/post/leetcode-contest-189/</guid>
      <description>&lt;p&gt;Solved three out of four problems. Did not have enough time for the last problem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Thinking Framework for Dynamic Programming</title>
      <link>http://localhost:1313/post/dynamic-programming-thinking-framework/</link>
      <pubDate>Fri, 15 May 2020 10:31:19 -0400</pubDate>
      
      <guid>http://localhost:1313/post/dynamic-programming-thinking-framework/</guid>
      <description>&lt;p&gt;Dynamic Programming(DP) problems are of the most challenging type to prepare for for two major reasons.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo for Personal Website</title>
      <link>http://localhost:1313/post/hugo_personal_blog/</link>
      <pubDate>Wed, 09 Jan 2019 16:50:46 -0500</pubDate>
      
      <guid>http://localhost:1313/post/hugo_personal_blog/</guid>
      <description>&lt;p&gt;I plan to write more in 2019. As the result I have resurrected my personal site.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Wed, 09 Jan 2019 13:56:04 -0500</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      <description>I like taking things apart and peek inside to see how they work.</description>
    </item>
    
    <item>
      <title>A Tutorial on Python Function Calls</title>
      <link>http://localhost:1313/post/five-minute-tutorial-for-python-functions/</link>
      <pubDate>Sun, 02 Nov 2014 12:08:20 -0500</pubDate>
      
      <guid>http://localhost:1313/post/five-minute-tutorial-for-python-functions/</guid>
      <description>&lt;p&gt;This tutorial gives you a quick overview of how Python handles function calls.&lt;/p&gt;
&lt;p&gt;The Python program we are going to examine is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>